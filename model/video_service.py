from commands.base_command import ActionCommand, LoggerCallable
from commands.download_video import DownloadVideo
from commands.download_subtitles import DownloadSubtitles
from commands.translate_subtitles import TranslateSubtitles
from commands.download_metadata import DownloadMetadata
# –ö–æ–º–∞–Ω–¥–∞ TranslateMetadata –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ —á–µ–∫–±–æ–∫—Å—ã, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞
# from commands.translate_metadata import TranslateMetadata
from commands.merge_audio import MergeAudio
from typing import List, Dict, Any, Optional, Type

class VideoService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–∞–¥ –≤–∏–¥–µ–æ.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π.
    """
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ –∫–ª—é—á–µ–π –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ –∫–ª–∞—Å—Å—ã –∫–æ–º–∞–Ω–¥
    COMMAND_MAPPING: Dict[str, Type[ActionCommand]] = {
        'dv': DownloadVideo,
        'ds': DownloadSubtitles,
        'dt': TranslateSubtitles,
        'md': DownloadMetadata,
        'da': MergeAudio,
        # 'tm': TranslateMetadata, # –ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–≤–æ–¥–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    }

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: –∫–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã —Ç—Ä–µ–±—É—é—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è 'md' (DownloadMetadata) –ø–µ—Ä–µ–¥ —Å–æ–±–æ–π
    METADATA_DEPENDENCIES = {'dv', 'ds', 'dt', 'da'} # 'tm' —Ç–æ–∂–µ –±—É–¥–µ—Ç –∑–∞–≤–∏—Å–µ—Ç—å

    def __init__(self, logger: LoggerCallable):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–µ—Ä–≤–∏—Å–∞.

        Args:
            logger: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π.
        """
        self.logger: LoggerCallable = logger

    def perform_actions(self, url: str, yandex_audio: Optional[str], actions: List[str]) -> bool:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.

        Args:
            url: URL –≤–∏–¥–µ–æ.
            yandex_audio: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É Yandex Audio (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è).
            actions: –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, ['md', 'dv', 'da']).

        Returns:
            True, –µ—Å–ª–∏ –≤—Å–µ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
        """
        context: Dict[str, Any] = {"url": url, "yandex_audio": yandex_audio, "base": None}

        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –ø–µ—Ä–≤—ã–º–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω—É–∂–Ω—ã –¥—Ä—É–≥–∏–º –∫–æ–º–∞–Ω–¥–∞–º
        ordered_actions = actions[:] # –ö–æ–ø–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
        needs_metadata = any(action in self.METADATA_DEPENDENCIES for action in ordered_actions)

        if needs_metadata and 'md' not in ordered_actions:
            # –ï—Å–ª–∏ –Ω—É–∂–Ω—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, –Ω–æ –∫–æ–º–∞–Ω–¥–∞ 'md' –Ω–µ –≤—ã–±—Ä–∞–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ –≤ –Ω–∞—á–∞–ª–æ
            ordered_actions.insert(0, 'md')
            self.logger("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ 'Download Metadata', —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.")
        elif 'md' in ordered_actions and ordered_actions[0] != 'md':
            # –ï—Å–ª–∏ 'md' –≤—ã–±—Ä–∞–Ω–∞, –Ω–æ –Ω–µ –ø–µ—Ä–≤–∞—è, –ø–µ—Ä–µ–º–µ—â–∞–µ–º –µ–µ –≤ –Ω–∞—á–∞–ª–æ
            ordered_actions.remove('md')
            ordered_actions.insert(0, 'md')
            self.logger("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –î–µ–π—Å—Ç–≤–∏–µ 'Download Metadata' –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ø–µ—Ä–≤—ã–º.")


        self.logger(f"–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è URL: {url}")
        self.logger(f"–ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: {actions}")
        self.logger(f"–ü–æ—Ä—è–¥–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {ordered_actions}")

        success = True
        for action_key in ordered_actions:
            command_class = self.COMMAND_MAPPING.get(action_key)
            if command_class:
                command_instance = command_class(self.logger)
                action_name = command_instance.__class__.__name__
                self.logger(f"‚ñ∂ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {action_name}...")
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—É—Å–ª–æ–≤–∏—è –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥—ã (–ø—Ä–∏–º–µ—Ä)
                    if action_key in self.METADATA_DEPENDENCIES and context.get('base') is None:
                         # –≠—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –∏–∑-–∑–∞ –ª–æ–≥–∏–∫–∏ –≤—ã—à–µ, –Ω–æ –¥–ª—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏
                         self.logger(f"–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å '{action_name}', —Ç.–∫. –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ ('base').")
                         success = False
                         break # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∏

                    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
                    command_instance.execute(context)
                    self.logger(f"‚úî –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {action_name}.")

                except KeyError as e:
                    self.logger(f"‚úñ –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è {action_name}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –∫–ª—é—á –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: {e}")
                    success = False
                    break # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                except FileNotFoundError as e:
                    self.logger(f"‚úñ –û—à–∏–±–∫–∞ —Ñ–∞–π–ª–∞ –¥–ª—è {action_name}: {e}")
                    # –ß–∞—Å—Ç–æ —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤–Ω–µ—à–Ω–∏–µ —É—Ç–∏–ª–∏—Ç—ã (yt-dlp, ffmpeg) –∏–ª–∏ –≤—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã
                    success = False
                    break # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                except subprocess.CalledProcessError as e:
                    self.logger(f"‚úñ –û—à–∏–±–∫–∞ –≤–Ω–µ—à–Ω–µ–π –∫–æ–º–∞–Ω–¥—ã –¥–ª—è {action_name}: {e}")
                    # –õ–æ–≥ –æ—à–∏–±–∫–∏ —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–Ω—É—Ç—Ä–∏ –∫–æ–º–∞–Ω–¥—ã, –∑–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ñ–∞–∫—Ç
                    success = False
                    break # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                except Exception as e:
                    # –õ–æ–≤–∏–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
                    self.logger(f"‚úñ –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {action_name}: {type(e).__name__} - {e}")
                    import traceback
                    self.logger(f"Traceback:\n{traceback.format_exc()}")
                    success = False
                    break # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            else:
                self.logger(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª—é—á –¥–µ–π—Å—Ç–≤–∏—è '{action_key}', –ø—Ä–æ–ø—É—Å–∫.")

        if success:
            self.logger("üéâ –í—Å–µ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")
        else:
            self.logger("‚ùå –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏.")

        return success