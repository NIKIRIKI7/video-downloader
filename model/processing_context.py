from dataclasses import dataclass, field
import os
from typing import Optional, List
import constants # Import constants for default values and suffixes

@dataclass
class ProcessingContext:
    """Holds the data and state during video processing."""
    url: str
    output_dir: str
    yandex_audio: Optional[str] = None

    # --- Data derived by commands ---
    base: Optional[str] = None # Base filename derived from ID or title
    title: Optional[str] = None
    description: Optional[str] = None
    tags: List[str] = field(default_factory=list)

    # --- Paths generated by commands ---
    video_path: Optional[str] = None # Path to the downloaded video file
    subtitle_path: Optional[str] = None # Path to the original language subtitles
    translated_subtitle_path: Optional[str] = None # Path to the translated subtitles
    metadata_path: Optional[str] = None # Path to the original metadata file
    translated_metadata_path: Optional[str] = None # Path to the translated metadata file
    merged_video_path: Optional[str] = None # Path to the video with mixed audio

    def _get_path(self, suffix: str, ext: str) -> Optional[str]:
        """Helper to construct a full path in the output directory."""
        if not self.base:
            return None
        filename = f"{self.base}{suffix}.{ext}"
        return os.path.join(self.output_dir, filename)

    # --- Methods to get expected file paths ---
    def get_metadata_filepath(self, lang: Optional[str] = None) -> Optional[str]:
        """Gets the path for the metadata file (original or translated)."""
        suffix = f".{constants.META_SUFFIX}"
        if lang:
            suffix += f".{lang}"
        return self._get_path(suffix, constants.META_EXT)

    def get_subtitle_filepath(self, lang: str) -> Optional[str]:
        """Gets the path for a subtitle file of a specific language."""
        return self._get_path(f".{lang}", constants.SUBTITLE_EXT)

    def get_video_filepath(self) -> Optional[str]:
        """Gets the path for the main downloaded video file."""
        # Note: yt-dlp might download a different extension initially,
        # but DownloadVideo command aims to provide the MP4 path.
        return self._get_path("", constants.VIDEO_FORMAT_EXT)

    def get_merged_video_filepath(self) -> Optional[str]:
        """Gets the path for the video file with mixed audio."""
        return self._get_path(f".{constants.AUDIO_MIX_SUFFIX}", constants.VIDEO_FORMAT_EXT)