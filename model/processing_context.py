from dataclasses import dataclass, field
import os
from typing import Optional, List
# Import constants only for default values
import constants

@dataclass
class ProcessingContext:
    """Holds the data and state during video processing, including settings."""
    # --- Inputs (Required) ---
    url: str
    output_dir: str

    # --- Inputs (Optional) ---
    yandex_audio: Optional[str] = None # Path to the external audio

    # --- Settings (passed from GUI/ViewModel, with defaults from constants) ---
    source_lang: str = constants.SOURCE_LANG_DEFAULT
    target_lang: str = constants.TARGET_LANG_DEFAULT
    subtitle_lang: str = constants.SUB_LANG_DEFAULT # Language for downloading subs
    subtitle_format: str = constants.SUB_FORMAT_DEFAULT
    video_format_ext: str = constants.VIDEO_FORMAT_EXT_DEFAULT
    yt_dlp_format: str = constants.YT_DLP_FORMAT_DEFAULT
    original_volume: str = constants.ORIGINAL_VOLUME_DEFAULT # Keep as string for ffmpeg
    added_volume: str = constants.ADDED_VOLUME_DEFAULT # Keep as string for ffmpeg
    merged_audio_codec: str = constants.MERGED_AUDIO_CODEC_DEFAULT

    # --- Data derived by commands (Internal State) ---
    base: Optional[str] = None # Base filename derived from ID or title
    title: Optional[str] = None
    description: Optional[str] = None
    tags: List[str] = field(default_factory=list)

    # --- Paths generated by commands (Internal State) ---
    video_path: Optional[str] = None # Path to the downloaded video file
    subtitle_path: Optional[str] = None # Path to original language subs (using subtitle_lang)
    translated_subtitle_path: Optional[str] = None # Path to translated subs (using target_lang)
    metadata_path: Optional[str] = None # Path to original metadata file (using meta suffix)
    translated_metadata_path: Optional[str] = None # Path to translated metadata file (using target_lang)
    merged_video_path: Optional[str] = None # Path to the video with mixed audio

    def _get_path(self, suffix: str, ext: str) -> Optional[str]:
        """
        Helper to construct a full path in the output directory based on the base name.
        Ensures consistent formatting of suffix and extension.
        """
        if not self.base:
            # Cannot generate path without base name
            return None

        # Ensure suffix starts with '.' if it's not empty and doesn't already
        safe_suffix = suffix
        if suffix and not suffix.startswith('.'):
             safe_suffix = f".{suffix}"

        # Ensure extension starts with '.' and is not empty
        safe_ext = ext.strip()
        if safe_ext and not safe_ext.startswith('.'):
            safe_ext = f".{safe_ext}"
        elif not safe_ext:
             # If extension is empty, we might just want the base name + suffix
             safe_ext = ""


        # Combine, handling potential overlap (e.g., suffix already includes extension)
        if safe_suffix.endswith(safe_ext) and safe_ext:
             filename = f"{self.base}{safe_suffix}"
        else:
             filename = f"{self.base}{safe_suffix}{safe_ext}"

        # Normalize the path for the OS
        return os.path.join(self.output_dir, filename)

    # --- Methods to get expected file paths (using settings from context) ---

    def get_metadata_filepath(self, lang: Optional[str] = None) -> Optional[str]:
        """
        Gets the path for the metadata file.
        If lang is provided (e.g., target_lang), it's added to the suffix.
        Uses META_SUFFIX and META_EXT_DEFAULT constants.
        """
        suffix = f".{constants.META_SUFFIX}"
        if lang:
            # Use the provided language (e.g., target_lang) for the suffix part
            suffix += f".{lang}"
        # Metadata always uses the default .txt extension from constants
        return self._get_path(suffix, constants.META_EXT_DEFAULT)

    def get_subtitle_filepath(self, lang: str) -> Optional[str]:
        """
        Gets the path for a subtitle file of a specific language.
        Uses the subtitle format setting from the context (`self.subtitle_format`).
        """
        if not lang: return None # Language is required
        # Use the subtitle format setting stored in this context instance
        subtitle_ext = self.subtitle_format
        return self._get_path(f".{lang}", subtitle_ext)

    def get_video_filepath(self) -> Optional[str]:
        """
        Gets the path for the main downloaded video file.
        Uses the video format extension setting from the context (`self.video_format_ext`).
        """
        # Use the video format extension setting stored in this context instance
        video_ext = self.video_format_ext
        return self._get_path("", video_ext) # No suffix for the base video file

    def get_merged_video_filepath(self) -> Optional[str]:
        """
        Gets the path for the video file with mixed audio.
        Uses the AUDIO_MIX_SUFFIX constant and the video format extension
        setting from the context (`self.video_format_ext`).
        """
        # Use the video format extension setting stored in this context instance
        video_ext = self.video_format_ext
        # Use the mixing suffix from constants
        mix_suffix = f".{constants.AUDIO_MIX_SUFFIX}"
        return self._get_path(mix_suffix, video_ext)