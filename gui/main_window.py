# File: gui/main_window.py

import tkinter as tk
from tkinter import ttk, messagebox, Menu, filedialog
import threading
import os
import traceback
from pathlib import Path
from typing import Any, Dict

from .process_tab import ProcessTab
from .settings_tab import SettingsTab
from .trim_tab import TrimTab
from viewmodel.video_viewmodel import VideoViewModel
import constants
from utils.utils import find_executable, is_valid_time_format

class MainApplication:
    """
    –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º UI/UX:
    - –ú–µ–Ω—é –§–∞–π–ª/–ü–æ–º–æ—â—å
    - –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
    - –ò–∫–æ–Ω–∫–∏ –≤ –≤–∫–ª–∞–¥–∫–∞—Ö
    - –°—Ç–∞—Ç—É—Å-–±–∞—Ä
    """
    def __init__(self, root: tk.Tk, view_model: VideoViewModel):
        self.root = root
        self.vm = view_model
        self.vm.add_listener(self._handle_vm_notification)

        # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫–Ω–∞ ---
        self.root.title("–í–∏–¥–µ–æ–û–±—Ä–∞–±–æ—Ç—á–∏–∫ v1.2")
        self._center_window(900, 800)
        self._create_menu()

        # --- –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è ---
        style = ttk.Style()
        style.theme_use('clam')
        style.configure('TNotebook.Tab', padding=(10,6), font=('Segoe UI', 10))
        style.configure('TButton', font=('Segoe UI', 10))
        style.configure('Status.TLabel', font=('Segoe UI', 9))

        # --- –ë–ª–æ–∫–Ω–æ—Ç –≤–∫–ª–∞–¥–æ–∫ ---
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)

        self.process_tab = ProcessTab(self.notebook)
        self.trim_tab = TrimTab(self.notebook)
        self.settings_tab = SettingsTab(self.notebook)

        self.notebook.add(self.process_tab, text='üì• –û–±—Ä–∞–±–æ—Ç–∫–∞')
        self.notebook.add(self.trim_tab,   text='‚úÇÔ∏è –û–±—Ä–µ–∑–∫–∞')
        self.notebook.add(self.settings_tab, text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')

        # --- –°—Ç–∞—Ç—É—Å-–±–∞—Ä ---
        self.status_var = tk.StringVar(value='–ì–æ—Ç–æ–≤–æ')
        status = ttk.Label(self.root, textvariable=self.status_var,
                           style='Status.TLabel', relief=tk.SUNKEN, anchor=tk.W, padding=(5,2))
        status.pack(fill=tk.X, side=tk.BOTTOM)

        # --- –ü—Ä–∏–≤—è–∑–∫–∞ –∫–Ω–æ–ø–æ–∫ ---
        self.process_tab.start_btn.config(command=self._on_start_url_processing)
        self.process_tab.clear_log_btn.config(command=self._clear_log)
        self.trim_tab.trim_btn.config(command=self._on_start_trim)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö —É—Ç–∏–ª–∏—Ç –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ UI
        self.root.after(100, self._check_external_tools)

    def _center_window(self, width: int, height: int) -> None:
        ws, hs = self.root.winfo_screenwidth(), self.root.winfo_screenheight()
        x = (ws//2) - (width//2)
        y = (hs//2) - (height//2)
        self.root.geometry(f"{width}x{height}+{x}+{y}")

    def _create_menu(self) -> None:
        menubar = Menu(self.root)
        file_menu = Menu(menubar, tearoff=0)
        file_menu.add_command(label='–í—ã—Ö–æ–¥', command=self.root.quit)
        menubar.add_cascade(label='–§–∞–π–ª', menu=file_menu)

        help_menu = Menu(menubar, tearoff=0)
        help_menu.add_command(label='–û –ø—Ä–æ–≥—Ä–∞–º–º–µ', command=self._show_about)
        help_menu.add_command(label='–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è', command=self._open_docs)
        menubar.add_cascade(label='–ü–æ–º–æ—â—å', menu=help_menu)

        self.root.config(menu=menubar)

    def _show_about(self) -> None:
        messagebox.showinfo('–û –ø—Ä–æ–≥—Ä–∞–º–º–µ', '–í–∏–¥–µ–æ–û–±—Ä–∞–±–æ—Ç—á–∏–∫ v1.2\n–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ mcniki')

    def _open_docs(self) -> None:
        messagebox.showinfo('–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è', '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ docs –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞.')

    def _check_external_tools(self) -> None:
        missing = []
        for tool, display in [('yt-dlp','yt-dlp'), ('ffmpeg','FFmpeg')]:
            if not find_executable(tool, getattr(constants, f"{tool.upper()}_PATH")): missing.append(display)
        if missing:
            self._set_status('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã: ' + ', '.join(missing))
        else:
            self._set_status('‚úîÔ∏è –í—Å–µ —É—Ç–∏–ª–∏—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã')

    def _set_status(self, text: str) -> None:
        self.status_var.set(text)

    def _add_log_message(self, message: str, level: str = 'INFO') -> None:
        self.process_tab.add_log_message(message, level)
        self._set_status(f"{level}: {message}")

    def _clear_log(self) -> None:
        self.process_tab.clear_log()
        self._set_status('–õ–æ–≥ –æ—á–∏—â–µ–Ω')

    def _on_start_url_processing(self) -> None:
        self._set_status('–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL...')
        self._add_log_message('>>> –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL', 'INFO')
        self._run_url_flow()

    def _run_url_flow(self) -> None:
        url = self.process_tab.get_url()
        ya = self.process_tab.get_yandex_audio()
        out_dir = self.process_tab.get_output_dir()
        actions = self.process_tab.get_selected_actions()
        settings = self.settings_tab.get_settings()

        errors = []
        if not url.startswith(('http://','https://')): errors.append('–ù–µ–≤–µ—Ä–Ω—ã–π URL')
        if not actions: errors.append('–ù–µ –≤—ã–±—Ä–∞–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ')
        if not out_dir: errors.append('–ù–µ —É–∫–∞–∑–∞–Ω–∞ –ø–∞–ø–∫–∞ –≤—ã–≤–æ–¥–∞')
        if errors:
            messagebox.showerror('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞', '\n'.join(errors))
            self._set_status('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞')
            return

        try:
            self.vm.run(url, ya, actions, out_dir, settings)
        except Exception as e:
            messagebox.showerror('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞', str(e))
            self._set_status('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞')

    def _on_start_trim(self) -> None:
        self._set_status('–ó–∞–ø—É—Å–∫ –æ–±—Ä–µ–∑–∫–∏...')
        self._add_log_message('>>> –ó–∞–ø—É—Å–∫ –æ–±—Ä–µ–∑–∫–∏', 'TRIM')
        self._run_trim_flow()

    def _run_trim_flow(self) -> None:
        inp = self.trim_tab.get_input_path()
        outp = self.trim_tab.get_output_path()
        st = self.trim_tab.get_start_time()
        et = self.trim_tab.get_end_time()

        errors = []
        if not inp or not os.path.isfile(inp): errors.append('–ù–µ–≤–µ—Ä–Ω—ã–π –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª')
        if not outp: errors.append('–ù–µ —É–∫–∞–∑–∞–Ω –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª')
        if not is_valid_time_format(st) or not is_valid_time_format(et): errors.append('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏')
        if errors:
            messagebox.showerror('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ (–û–±—Ä–µ–∑–∫–∞)', '\n'.join(errors))
            self._set_status('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞')
            return

        try:
            self.vm.run_trim(inp, outp, st, et)
        except Exception as e:
            messagebox.showerror('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞', str(e))
            self._set_status('–û—à–∏–±–∫–∞ –æ–±—Ä–µ–∑–∫–∏')

    def _handle_vm_notification(self, msg: Dict[str, Any]) -> None:
        # –í—Å–µ–≥–¥–∞ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ —á–µ—Ä–µ–∑ after
        if not hasattr(self, 'root') or not self.root.winfo_exists(): return
        self.root.after(0, self._process_vm_queue)

    def _process_vm_queue(self) -> None:
        while True:
            try:
                msg = self.vm.get_message_from_queue()
            except Exception:
                break
            if not msg: break

            mtype = msg.get('type')
            level = msg.get('level', 'INFO')
            data = msg.get('data')
            origin = msg.get('origin','url')

            if mtype == 'log':
                self._add_log_message(str(data), level)
            elif mtype == 'status':
                status = '–£—Å–ø–µ—Ö' if data=='finished' else '–û—à–∏–±–∫–∞'
                self._set_status(f"{origin}: {status}")

def create_gui():
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ—Ä–Ω–µ–≤–æ–µ –æ–∫–Ω–æ Tkinter, ViewModel, GUI –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª."""
    root = tk.Tk()
    vm = VideoViewModel()
    app = MainApplication(root, vm)
    root.mainloop()