import subprocess
from model.video_service import VideoService
from commands.trim_media import TrimMedia # –î–æ–±–∞–≤–ª–µ–Ω–æ
# Import ProcessingContext only for type hints if needed, not for direct use here
# from model.processing_context import ProcessingContext
# Import constants only if needed for some VM logic, usually not required
# import constants
import os
from typing import List, Callable, Any, Optional, Dict
import queue
import traceback
import threading

# Type hint for listeners (typically the GUI's notification handler)
ViewModelListener = Callable[[Dict[str, Any]], None]

class VideoViewModel:
    """
    ViewModel, —Å–≤—è–∑—ã–≤–∞—é—â–∏–π View (GUI) –∏ Model (VideoService, TrimMedia).
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥–∏–∫–æ–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–∏, —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏ –æ–±–º–µ–Ω–æ–º –¥–∞–Ω–Ω—ã–º–∏ —á–µ—Ä–µ–∑ –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω—É—é –æ—á–µ—Ä–µ–¥—å.
    """
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç ViewModel, –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π, VideoService –∏ TrimMedia."""
        self.message_queue = queue.Queue() # –ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π View
        self.listeners: List[ViewModelListener] = [] # –°–ø–∏—Å–æ–∫ —Å–ª—É—à–∞—Ç–µ–ª–µ–π (–æ–±—ã—á–Ω–æ GUI)
        # –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL, –ø–µ—Ä–µ–¥–∞–µ–º –º–µ—Ç–æ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å
        self.service = VideoService(self._log_message_to_queue)
        # –ö–æ–º–∞–Ω–¥–∞ –æ–±—Ä–µ–∑–∫–∏, –ø–µ—Ä–µ–¥–∞–µ–º —Ç–æ—Ç –∂–µ –º–µ—Ç–æ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.trimmer = TrimMedia(self._log_message_to_queue)
        # –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
        self._is_url_processing = False
        self._url_processing_thread: Optional[threading.Thread] = None
        self._is_trimming = False
        self._trimming_thread: Optional[threading.Thread] = None


    def add_listener(self, listener: ViewModelListener):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é-—Å–ª—É—à–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, _handle_vm_notification –∏–∑ GUI)."""
        if listener not in self.listeners:
            self.listeners.append(listener)

    def remove_listener(self, listener: ViewModelListener):
        """–£–¥–∞–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é-—Å–ª—É—à–∞—Ç–µ–ª—è."""
        try:
            self.listeners.remove(listener)
        except ValueError:
            pass

    def _notify_listeners(self, message: Dict[str, Any]):
        """
        –£–≤–µ–¥–æ–º–ª—è–µ—Ç –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π –æ —Å–æ–±—ã—Ç–∏–∏.
        –ú–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑ —Ä–∞–±–æ—á–µ–≥–æ –ø–æ—Ç–æ–∫–∞, –ø–æ—ç—Ç–æ–º—É —Å–ª—É—à–∞—Ç–µ–ª–∏ (GUI)
        –¥–æ–ª–∂–Ω—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø–æ—Ç–æ–∫–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É—è `root.after` –≤ Tkinter).
        –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—ã—á–Ω–æ —Å–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ –Ω–∞–ª–∏—á–∏–∏ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –æ—á–µ—Ä–µ–¥–∏.
        """
        for listener in self.listeners:
            try:
                listener(message)
            except Exception as e:
                print(f"–û–®–ò–ë–ö–ê –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ª—É—à–∞—Ç–µ–ª—è ViewModel {listener.__name__}: {e}", flush=True)
                print(traceback.format_exc(), flush=True)

    def _log_message_to_queue(self, msg: str, origin: str = "url"):
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏–∑ Model –∏–ª–∏ VM), –ø–æ–º–µ—â–∞—è –µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è View.
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ (origin).
        """
        level = "INFO"
        msg_lower = msg.lower()
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞–º
        if msg_lower.startswith("[error]") or msg_lower.startswith("‚úñ") or msg_lower.startswith("‚ùå"):
             level = "ERROR"
        elif msg_lower.startswith("[warn]"):
             level = "WARN"
        elif msg_lower.startswith("‚ñ∂") or msg_lower.startswith("‚úî") or msg_lower.startswith("üéâ") or msg_lower.startswith("‚úÖ") or msg_lower.startswith("[info]"):
             level = "INFO"
        elif msg_lower.startswith("[debug]"):
             level = "DEBUG"
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ –¥–ª—è GUI
        elif msg_lower.startswith("[trim]"):
             level = "TRIM"
             # –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å [TRIM] –∏–∑ —Å–∞–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ —É—Ä–æ–≤–µ–Ω—å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
             if msg.startswith("[TRIM]"):
                 msg = msg[len("[TRIM]"):].lstrip()


        # –§–∏–ª—å—Ç—Ä—É–µ–º DEBUG —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ (—É—Å–ª–æ–≤–Ω–æ)
        # if level == "DEBUG" and not constants.DEBUG_MODE: return

        log_event = {"type": "log", "level": level, "data": msg, "origin": origin}
        self.message_queue.put(log_event)
        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–µ–π, —á—Ç–æ –æ—á–µ—Ä–µ–¥—å –æ–±–Ω–æ–≤–∏–ª–∞—Å—å
        self._notify_listeners({"type": "queue_update"})


    def run(self, url: str, yandex_audio: Optional[str], actions: List[str], output_dir: str, settings: Dict[str, Any]):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–¥–∞—á—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ (VideoService.perform_actions) –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ.
        """
        if self._is_url_processing and self._url_processing_thread and self._url_processing_thread.is_alive():
             self._log_message_to_queue("[WARN] –ó–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è.", origin="url")
             return
        if self._is_trimming and self._trimming_thread and self._trimming_thread.is_alive():
             self._log_message_to_queue("[WARN] –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–µ–∑–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL.", origin="url")
             return

        self._is_url_processing = True

        # –°–∏–≥–Ω–∞–ª –æ –Ω–∞—á–∞–ª–µ –≤ GUI —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å
        self.message_queue.put({"type": "status", "level":"INFO", "data": "running", "origin": "url"})
        self._notify_listeners({"type": "queue_update"})

        # –¶–µ–ª–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        def task():
            success = False
            try:
                success = self.service.perform_actions(url, yandex_audio, actions, output_dir, settings)
            except Exception as e:
                error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è VideoService: {type(e).__name__} - {e}"
                self._log_message_to_queue(f"[ERROR] {error_msg}", origin="url")
                self._log_message_to_queue(f"[DEBUG] Traceback:\n{traceback.format_exc()}", origin="url")
                success = False
            finally:
                status = "finished" if success else "error"
                level = "INFO" if success else "ERROR"
                self.message_queue.put({"type": "status", "level": level, "data": status, "origin": "url"})
                self._notify_listeners({"type": "queue_update"})
                self._is_url_processing = False # –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞

        self._url_processing_thread = threading.Thread(target=task, daemon=True)
        self._url_processing_thread.start()


    def run_trim(self, input_path: str, output_path: str, start_time: str, end_time: str):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–¥–∞—á—É –æ–±—Ä–µ–∑–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ (TrimMedia.execute) –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ.
        """
        if self._is_trimming and self._trimming_thread and self._trimming_thread.is_alive():
            self._log_message_to_queue("[WARN] –ó–∞–¥–∞—á–∞ –æ–±—Ä–µ–∑–∫–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è.", origin="trim")
            return
        if self._is_url_processing and self._url_processing_thread and self._url_processing_thread.is_alive():
            self._log_message_to_queue("[WARN] –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –æ–±—Ä–µ–∑–∫–∏.", origin="trim")
            return

        self._is_trimming = True

        # –°–∏–≥–Ω–∞–ª –æ –Ω–∞—á–∞–ª–µ –≤ GUI
        self.message_queue.put({"type": "status", "level":"INFO", "data": "running", "origin": "trim"})
        self._notify_listeners({"type": "queue_update"})

        # –¶–µ–ª–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –æ–±—Ä–µ–∑–∫–∏
        def trim_task():
            success = False
            try:
                # –í—ã–∑—ã–≤–∞–µ–º execute —É —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ TrimMedia
                self.trimmer.execute(input_path, output_path, start_time, end_time)
                success = True # –ï—Å–ª–∏ execute –Ω–µ –≤—ã–∑–≤–∞–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º
            except Exception as e:
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —á–µ—Ä–µ–∑ –Ω–∞—à—É —Å–∏—Å—Ç–µ–º—É (trimmer —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã–ª –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª–∏)
                self._log_message_to_queue(f"[ERROR] –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—Ä–µ–∑–∫–∏: {type(e).__name__} - {e}", origin="trim")
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º traceback –¥–ª—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
                if not isinstance(e, (FileNotFoundError, ValueError, subprocess.CalledProcessError)):
                     self._log_message_to_queue(f"[DEBUG] Traceback:\n{traceback.format_exc()}", origin="trim")
                success = False
            finally:
                status = "finished" if success else "error"
                level = "INFO" if success else "ERROR"
                self.message_queue.put({"type": "status", "level": level, "data": status, "origin": "trim"})
                self._notify_listeners({"type": "queue_update"})
                self._is_trimming = False # –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞

        self._trimming_thread = threading.Thread(target=trim_task, daemon=True)
        self._trimming_thread.start()


    def get_message_from_queue(self) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–∑–≤–æ–ª—è–µ—Ç View (–∏–ª–∏ –¥—Ä—É–≥–∏–º —Å–ª—É—à–∞—Ç–µ–ª—è–º) –∏–∑–≤–ª–µ—á—å –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∞—á–µ None.
        """
        try:
            return self.message_queue.get_nowait()
        except queue.Empty:
            return None